<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">
<!-- Checkstyle configuration that checks the Google coding conventions from Google Java Style that can be found at https://google.github.io/styleguide/javaguide.html. 
    Checkstyle is very configurable. Be sure to read the documentation at http://checkstyle.sf.net (or in your downloaded distribution). 
    To completely disable a check, just comment it out or delete it from the file. Authors: Max Vetrenko, Ruslan Diachenko, Roman 
    Ivanov. -->
<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="warning" />
    <property name="fileExtensions" value="java, properties, xml" />
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>
    <module name="NewlineAtEndOfFile" />
    <module name="RegexpMultiline">
        <property name="message" value="Blank line at end of block should be removed" />
        <property name="format" value="(?&lt;!\{\s{0,99}$)^$(?=^\s{0,99}\})" />
        <property name="fileExtensions" value="java" />
    </module>
    <!-- Filter out Checkstyle warnings that have been suppressed with the 
        @SuppressWarnings annotation -->
    <module name="SuppressWarningsFilter" />
    <module name="TreeWalker">
    <!-- Remove this ability once all Feed Pojo's sonar violation are cleared and updated in batch-->
        <module name="SuppressWarningsHolder" />
        <module name="SingleSpaceSeparator" />
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="DOT" />
            <property name="allowLineBreaks" value="false" />
        </module>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false" />
        </module>
        <module name="OuterTypeFilename" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>
        <module name="WhitespaceAfter">
            <property name="tokens"
                value="COMMA, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, DO_WHILE" />
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
        </module>
        <module name="AvoidStarImport" />
        <module name="LineLength">
            <property name="max" value="180" />
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
        </module>
        <module name="OneTopLevelClass" />
        <module name="NoLineWrap" />
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
            <property name="allowMultipleEmptyLines" value="false" />
        </module>
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>
        <module name="NeedBraces" />
        <module name="LeftCurly" />
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>
        <module name="OneStatementPerLine" />
        <module name="MultipleVariableDeclarations" />
        <module name="ArrayTypeStyle" />
        <module name="MissingSwitchDefault" />
        <module name="FallThrough" />
        <module name="UpperEll" />
        <module name="ModifierOrder" />
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEllipsis" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapArrayDeclarator" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[_a-z][_a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MemberName" />
        <module name="ParameterName" />
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][_a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="NoFinalizer" />
        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="0" />
            <property name="arrayInitIndent" value="8" />
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="20" />
        </module>
        <module name="MethodParamPad" />
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF" />
            <property name="allowLineBreaks" value="true" />
        </module>
        <module name="ParenPad" />
        <module name="OperatorWrap">
            <property name="option" value="NL" />
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>
        <module name="MethodName">
            <property name="format" value="^[_a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>
        <module name="JavadocTagContinuationIndentation" />
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
            <property name="period" value="" />
        </module>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false" />
        </module>
        <module name="CommentsIndentation" />
    </module>
</module>
